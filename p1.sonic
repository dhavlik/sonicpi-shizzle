use_bpm 150

set :n28, 0.0

set :sd_part_1, true
set :bs2_part_1, true
set :bd_part_1, false
set :bd_part_2, false
set :hh_part_1, true
set :fx_part_1, false
set :cotb, 106.6
set :tblen, 0.4
set :restb,0.1

live_loop :lpdfeedback do
  use_real_time
  if get[:sd_part_1]
    midi_note_on 24, 1
  else
    midi_note_off 24, 0
  end
  if get[:bd_part_1]
    midi_note_on 25, 1
  else
    midi_note_off 25, 0
  end
  if get[:bd_part_2]
    midi_note_on 29, 1
  else
    midi_note_off 29, 0
  end
  if get[:hh_part_1]
    midi_note_on 26, 1
  else
    midi_note_off 26, 0
  end
  if get[:bs2_part_1]
    midi_note_on 27, 1
  else
    midi_note_off 27, 0
  end
  if get[:fx_part_1]
    midi_note_on 30, 1
  else
    midi_note_off 30, 0
  end
  sleep 1
end


live_loop :set_osc_x_params do
  b = sync "/osc/acc/x"
  set :cotb, 20 + ((b[0]/360) * 100)
end

live_loop :set_osc_y_params do
  b = sync "/osc/acc/y"
  set :oscy, (b[0].abs)+1
end

live_loop :set_osc_z_params do
  b = sync "/osc/acc/z"
  set :oscz, (b[0].abs)+1
end

live_loop :get_piezo do
use_real_time
   b = sync "/osc/piezo/0/0"
sample :elec_wood
end




live_loop :set_cntrl_params do
  use_real_time
  b = sync "/midi/lpd8/0/1/control_change"

  if b[0]==3 then
    set :cotb, b[1]
  end
  if b[0]==4 then
    set :restb, (b[1]/127.0)*0.99
  end
  if b[0]==1 then
    set :bddist, (b[1]/127.0) * 0.8
  end
  if b[0]==2 then
    set :tblen, (b[1]/127.0) * 0.2
  end
  if b[0]==8 then
    set :plipamp, (b[1]/127.0)
  end
end

live_loop :set_noteoff_params do
  use_real_time
  b = sync "/midi/lpd8/*/*/note_off"
  if b[0]==28 then
    set :n28, 0.0
  end
end


live_loop :set_note_params do
  use_real_time

  b = sync "/midi/lpd8/*/*/note_on"
  sd_part_1_value = get[:sd_part_1]
  bs2_part_1_value = get[:bs2_part_1]
  bd_part_1_value = get[:bd_part_1]
  bd_part_2_value = get[:bd_part_2]
  hh_part_1_value = get[:hh_part_1]
  fx_part_1_value = get[:fx_part_1]

  if b[0]==24 then
    if not sd_part_1_value then
      sd_part_1_value = true
    elsif sd_part_1_value then
      sd_part_1_value = false
    end
  end
  if b[0]==25 then
    if not bd_part_1_value then
      bd_part_1_value = true
    elsif bd_part_1_value then
      bd_part_1_value = false
    end
  end
  if b[0]==29 then
    if not bd_part_2_value then
      bd_part_2_value = true
    elsif bd_part_2_value then
      bd_part_2_value = false
    end
  end
  if b[0]==26 then
    if not hh_part_1_value then
      hh_part_1_value = true
    elsif hh_part_1_value then
      hh_part_1_value = false
    end
  end
  if b[0]==27 then
    if not bs2_part_1_value then
      bs2_part_1_value = true
    elsif bs2_part_1_value then
      bs2_part_1_value = false
    end
  end
  if b[0]==30 then
    if not fx_part_1_value then
      fx_part_1_value = true
    elsif fx_part_1_value then
      fx_part_1_value = false
    end
  end

  if b[0]==28 then
    set :n28, 0.4
  end
  set :sd_part_1, sd_part_1_value
  set :bs2_part_1, bs2_part_1_value
  set :bd_part_1, bd_part_1_value
  set :bd_part_2, bd_part_2_value
  set :hh_part_1, hh_part_1_value
  set :fx_part_1, fx_part_1_value

end

live_loop :base do
  sleep 8
end

live_loop :fx do
  sync :base
  if get[:fx_part_1]
    set :fx_part_1, false
    midi_note_off 30, 0
    sample :vinyl_scratch
  end
end

live_loop :bd1 do
  sync :base
  if not get[:bd_part_1] and not get[:bd_part_2]
    for timing in [2.5, 1.5, 2.5, 1.4]
       with_fx :distortion, distort: get[:bddist] do
          sample :bd_mehackit
          sleep timing
        end
      end
      elsif not get[:bd_part_1]
        for timing in [2, 2, 2, 1.9]
            with_fx :distortion, distort: get[:bddist] do
              sample :bd_fat
              sleep timing
            end
          end
          else
            for timing in [1, 1, 1, 1, 0.5, 0.125, 0.125, 0.25, 0.5, 1, 0.5, 0.4]
                with_fx :distortion, distort: get[:bddist] do
                  sample :bd_fat
                  sleep timing
                end
              end
              set :bd_part_1, false
              midi_note_off 25, 0
            end
          end

          live_loop :snare do
            sync :base
            if get[:sd_part_1]
              sleep 1
              for i in 0..2
                sample :elec_snare, start: 0.0
                sleep 2
              end
              sample :elec_snare,  start: 0.0
              sleep 0.9
            end
          end

          live_loop :hhat do
            sync :base
            if get[:hh_part_1]
              for i in 0..17
                sample :elec_cymbal, start: 0.3, amp:0.3
                if ((i+1) % 5  == 0) | ((i+2) % 5 == 0) 
sleep 0.25
elsif
                sleep 0.5
end
              end

            end
          end


          live_loop :bassline do
            sync :base
            use_synth :prophet
            bl = [[:c2, 1, 0.5],

                [:c3, 0.5, 0.2],
                [:c2, 0.5, 0.2],
                [:c3, 0.25, 0.2],
                [:c2, 0.25, 0.2],
                [:c2, 1, 0.2],
                [:c3, 0.5, 0.2],
                [:c2, 0.25, 0.1],
                [:c2, 0.25, 0.1],
                [:c2, 0.5, 0.2],
                [:c2, 0.5, 0.2],
                [:f2, 0.5, 0.2],
                [:f2, 0.5, 0.2],
                [:f3, 1, 0.2],
                [:c3, 0.25, 0.5],
              [:c2,0.2, 1]]
      bl.each { |n|
                play n[0], amp: n[1], release: n[2]+0.6, res: get[:restb], cutoff: get[:cotb]
                sleep n[1]
              }
            end



            live_loop :loopflash do
              sync :base
              midi_note_on 31, 1
              sleep 0.5
              midi_note_off 31,0
              sleep 3.5
              midi_note_on 31, 1
              sleep 0.05
              midi_note_off 31.0
            end

            live_loop :dark do
              sync :base
              with_synth :subpulse do
                for timing in [0.25, 0.25, 0.5, 0.5, 0.25, 0.25, 0.5, 0.5, 0.5, 0.25, 0.25, 0.5, 0.5, 0.5]
                    with_fx :slicer do
                      play :c6, release: 0.12, amp: get[:plipamp]
                      sleep timing
                    end
                  end
                  for timing in [0.5, 0.5, 0.5, 0.25, 0.25] do
                      with_fx :slicer do
                        play :c5, release: 0.12, amp: get[:plipamp]
                        sleep timing
                      end

                    end


                    play :c4, release: 0.2, amp: get[:plipamp]
                    sleep 0.4
                  end
                end


                live_loop :bs2 do
                  sync :base
                  if get[:bs2_part_1]
                    with_synth :zawa do
                      with_fx :panslicer, wave: 3, phase: 0.5 do
                        sleep 1
                        play_chord [:c4, :eb4, :g4], sustain: 1, amp: 0.2+get[:n28], release: 0.2+get[:n28]
                        sleep 1.75
                        play_chord [:c4, :eb4, :g4], sustain: 0.1, amp: 0.2, release: 0.2+get[:n28]
                        sleep 1.25
                        play_chord [:c4, :eb4, :g4], sustain: 0.1, amp: 0.2+get[:n28], release: 0.4+get[:n28]
                        sleep 2
                        play_chord [:bb3, :cb4, :f4], sustain: 0.1, amp: 0.2
                        sleep 1.5
                        play_chord [:c4, :eb4, :g4], sustain: 0.1, amp: 0.2+get[:n28], release: 0.5+get[:n28]
                      end
                    end
                  end
                end

